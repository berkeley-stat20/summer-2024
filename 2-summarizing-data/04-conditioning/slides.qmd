---
title: "Data Pipelines"
format:
  revealjs:
    author: "STAT 20: Introduction to Probability and Statistics"
    height: 900
    width: 1600
    theme: ../../assets/slides.scss
    multiplex: false
    transition: fade
    slide-number: c
    incremental: false
    center: false
    menu: false
    highlight-style: github
    progress: false
    code-overflow: wrap
    title-slide-attributes:
      data-background-image: ../../assets/stat20-hex-bg.png
      data-background-size: contain
execute:
  echo: true
---

## Agenda

```{r}
#| echo: false
library(tidyverse)
library(stat20data)
```

- Concept Questions
- Problem Set 4
- *Break*
- Lab 2.1: Flights 

## Announcements

- *RQ: A Grammar of Graphics* due Wednesday at 11:59pm

. . . 

- *Problem Set 4* (paper, max. 3) due next Tuesday at 9am 

. . . 

- *Lab 2.1* (paper, max. 2) due next Tuesday at 9am

. . . 

- *Quiz 1* next Monday at 11:59pm (direct logistical and content questions to the syllabus and megathread on Ed). 


# Concept Questions

## Question 1

```{r}
#| eval: false
c("fruit", "fruit", "vegetable") == "fruit"
```

:::{.poll}
What will this line of code return?

Respond at `pollev.com`.
:::

```{r}
#| echo: false
countdown::countdown(1, top = 0)
```


## Evaluating equivalence, cont.

In R, this evaluation happens element-wise when operating on vectors.

```{r}
#| eval: false

c("fruit", "fruit", "vegetable") == "fruit"
```

```{r}
#| echo: false
c("fruit", "fruit", "vegetable") == "fruit"
```

. . .

```{r fruit5, echo = TRUE, eval = FALSE}
c("fruit", "fruit", "vegetable") != "fruit"
```

. . .

```{r ref.label = "fruit5", echo = FALSE}
```

. . .

```{r fruit6, echo = TRUE, eval = FALSE}
c("fruit", "vegetable", "boba") %in% c("fruit", "vegetable")
```

. . .

```{r ref.label = "fruit6", echo = FALSE}
```

## Question 2

Which observations will be included in the following data frame?

```{r echo = TRUE, eval = FALSE}
class_survey |>
  filter(coding_exp_scale < 3,
        olympic_sport %in% c("Ice skating", "Speed skating"),
        entrepreneur == TRUE)
```

:::{.poll}
Please respond at `pollev.com`.
:::

```{r}
#| echo: false
countdown::countdown(1, top = 0)
```

<!--
## Question 3: Opinion

10. What are studentsâ€™ perceptions of the chance that there is a new COVID variant that disrupts instruction in Spring 2023?

:::{.poll}
Do you think students in their first semester would be *more* likely or *less* likely to think we would remain in remote learning for the entire semester?

Answer at `pollev.com`.
:::

:::notes
Q: what is the comparison group: all students or students who are not in their first semester?
:::

-->

## Question 3

:::{.poll}
Which data frame will have fewer rows?
:::

. . .

```{r echo = TRUE}
#| eval: false
# this one
filter(class_survey, year == "This is my first semester!")

# or this one
class_survey |>
  mutate(first_sem = (year == "This is my first semester!")) |>
  filter(first_sem)
```

```{r}
#| echo: false
countdown::countdown(1, top = 0)
```


# Concept Question 2 Redux - Building data pipelines

> How do we extract the average of these students' chance that class will be disrupted by a new COVID variant?

Let's look at three different ways to answer this question

## Nesting {auto-animate=true}


```{r}
#| eval: false
filter(class_survey, 
       coding_exp_scale < 3,
       olympic_sport %in% c("Ice skating", "Speed skating"),
       entrepreneur == TRUE)
```


## Nesting {auto-animate=true}


```{r}
#| eval: false
select(filter(class_survey, 
       coding_exp_scale < 3,
       olympic_sport %in% c("Ice skating", "Speed skating"),
       entrepreneur == TRUE),
       coding_exp_xcale,
       olympic_sport,
       entrepreneur,
       new_COVID_variant)
```

## Nesting {auto-animate=true}


```{r}
#| eval: false
summarize(select(filter(class_survey, 
       coding_exp_scale < 3,
       olympic_sport %in% c("Ice skating", "Speed skating"),
       entrepreneur == TRUE),
       coding_exp_scale,
       olympic_sport,
       entrepreneur,
       new_COVID_variant),
       covid_avg = mean(new_COVID_variant))
```

## Nesting {auto-animate=true}

```{r}
summarize(select(filter(class_survey, 
       coding_exp_scale < 3,
       olympic_sport %in% c("Ice skating", "Speed skating"),
       entrepreneur == TRUE),
       coding_exp_scale,
       olympic_sport,
       entrepreneur,
       new_COVID_variant),
       covid_avg = mean(new_COVID_variant))
```


<!--
## Data Pipelines

. . .

Most claims about data start with a *raw* data set, undergo many subsetting, aggregating, and cleaning operations, then return a *data product*.

![](images/pipeline-1.png)

. . .

> Let's look at three equivalent ways to build a pipeline

-->

## Nesting

```{r eval = FALSE, echo = TRUE}
summarize(select(filter(class_survey, 
       coding_exp_scale < 3,
       olympic_sport %in% c("Ice skating", "Speed skating"),
       entrepreneur == TRUE),
       coding_exp_scale,
       olympic_sport,
       entrepreneur,
       new_COVID_variant),
       covid_avg = mean(new_COVID_variant))
```

. . .

:::: {.columns}

::: {.column width="50%"}
**Cons**

- Must be read from inside out `r emo::ji("thumbs_down")` 
- Hard to keep track of arguments `r emo::ji("thumbs_down")` 
:::

::: {.column width="50%"}
**Pros**

- All in one line of code `r emo::ji("thumbs_up")`
- Only refer to one data frame `r emo::ji("thumbs_up")`
:::

::::


## Step-by-step

. . .

```{r eval = FALSE, echo = TRUE}
df1 <- filter(class_survey, 
              coding_exp_scale < 3,
              olympic_sport %in% c("Ice skating", "Speed skating"),
              entrepreneur == TRUE)
df2 <- select(df1, 
              coding_exp_scale,
              olympic_sport,
              entrepreneur,
              new_COVID_variant)
summarize(df2,
          covid_avg = mean(new_COVID_variant))
```

. . .

:::: {.columns}

::: {.column width="50%"}
**Cons**

- Have to repeat data frame names `r emo::ji("thumbs_down")` 
- Creates unnecessary objects `r emo::ji("thumbs_down")` 
:::

::: {.column width="50%"}
**Pros**

- Stores intermediate objects `r emo::ji("thumbs_up")`
- Can be read top to bottom `r emo::ji("thumbs_up")`
:::

::::


##

![](images/pipeline-2.png)


## Using the pipe operator

. . .

```{r eval = FALSE, echo = TRUE}
class_survey |>
  filter(coding_exp_scale < 3,
         olympic_sport %in% c("Ice skating", "Speed skating"),
         entrepreneur == TRUE) |>
  select(coding_exp_scale,
         olympic_sport,
         entrepreneur,
         new_COVID_variant) |>
  summarize(covid_avg = mean(new_COVID_variant))
```

:::: {.columns}

::: {.column width="50%"}
**Cons**

- `r emo::ji("shrug")` 
:::

::: {.column width="50%"}
**Pros**

- Can be read like an english paragraph `r emo::ji("thumbs_up")`
- Only type the data once `r emo::ji("thumbs_up")`
- No leftovers objects `r emo::ji("thumbs_up")`
:::

::::

## Understanding your pipeline

. . .

It's good practice to understand the output of each line of code by *breaking the pipe*.

. . .

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true
#| eval: true
#| error: true
class_survey |>
  select(new_COVID_variant) |>
  filter(year == "It's my first year.")
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
class_survey |>
  select(new_COVID_variant)
```
:::

::::


## Concept Question 2 Redux

```{r}
#| echo: true
#| eval: false
class_survey |> # A #<<
  filter(coding_exp_scale < 3,
         olympic_sport %in% c("Ice skating", 
                         "Speed skating"),
         entrepreneur == TRUE) |> # B #<<
  select(coding_exp_scale,
         olympic_sport,
         entrepreneur,
         new_COVID_variant) |> # C #<<
  summarize(covid_avg = mean(new_COVID_variant)) # D #<<
```

:::{.poll}
What are the dimensions (rows x columns) of the data frames output at each stage of this pipe?
:::

. . . 

```{r}
#| echo: false
countdown::countdown(1, top = 0)
```


## Concept Question 4

```{r echo = TRUE, eval = FALSE}
summarize(class_survey, mean(year == "I'm in my first year."))
```

:::{.poll}
What is will this line of code return?

Respond at `pollev.com`.
:::


## Boolean Algebra

Logical vectors have a dual representation as `TRUE` `FALSE` and `1`, `0`, so you can do math on logicals accordingly.

```{r echo = TRUE}
TRUE + TRUE
```

. . .

```{r}
TRUE * TRUE
```

. . .

> Taking the mean of a logical vector is equivalent to find the proportion of rows that are `TRUE` (i.e. the proportion of rows that meet the condition).

# Break

# Problem Set 5: Data Pipelines

```{r}
#| echo: false
countdown::countdown(25, top = 0)
```

# Break

```{r}
#| echo: false
countdown::countdown(5, top = 0)
```

# Lab 2.1: Flights

Let's move to the lab slides on the course website!

. . . 

```{r}
#| echo: false
countdown::countdown(25, top = 0)
```

# End of Lecture