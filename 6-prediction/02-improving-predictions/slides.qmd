---
title: "Evaluating and Improving Predictions"
format:
  revealjs:
    author: "STAT 20: Introduction to Probability and Statistics"
    height: 900
    width: 1600
    theme: ../../assets/slides.scss
    multiplex: false
    transition: fade
    slide-number: c
    incremental: false
    center: false
    menu: false
    highlight-style: github
    progress: true
    code-overflow: wrap
    title-slide-attributes:
      data-background-image: ../../assets/stat20-hex-bg.png
      data-background-size: contain
execute: 
  echo: false
---

## Agenda

-   Announcements
-   Concept Questions
-   Problem Set
-   Lab

## Announcements

-   Problem Sets:
    -   PS 16 (one-side) released Tuesday and due next Tuesday at 9am
    -   **PS 17 (one-side) released today and due next Tuesday at 9am**
    -   **Extra Practice released Thursday (non-turn in)**
  
. . . 

-   Lab 5:
    -   Lab 5.1 released Tuesday and due next Tuesday at 9am
    -   **Lab 5.2 released Thursday and due next Tuesday at 9am**
    -   **Lab 5 Workshop next Monday**

# Concept Questions

##

```{r}
#| fig-align: center
#| fig-width: 8
#| fig-height: 5

# simulate data -----------------------------------------------------
set.seed(9274)

x1 <- seq(0, 6, by = 0.05)

y_u <- (x1-3)^2 - 4 + rnorm(length(x1), mean = 0, sd = 1)
y_lin_pos_strong <- 3*x1 + 10 + rnorm(length(x1), mean = 0, sd = 2)
y_lin_pos_weak <- 3*x1 + 10 + rnorm(length(x1), mean = 0, sd = 20)

x2 <- seq(-8, -2, by = 0.05)

y_n <- -1 * (x2 + 5)^2 + 1 + rnorm(length(x2), mean = 0, sd = 2)
y_lin_neg_strong <- -5 * x2 + 3 + rnorm(length(x2), mean = 0, sd = 2)
y_none <- rnorm(length(x2), mean = 0, sd = 1)

df <- data.frame(x = c(rep(x1, 3), rep(x2, 3)),
                 y = c(y_u, y_lin_pos_strong, y_lin_pos_weak,
                       y_n, y_lin_neg_strong, y_none),
                 plot_num = rep(LETTERS[1:6], each = length(x1)))

library(tidyverse)
pa <- df %>%
    filter(plot_num == "A") %>%
    ggplot(aes(x = x, 
               y = y)) +
    geom_point() +
    geom_smooth(method = "lm", se = FALSE, color = "green") +
    facet_wrap(vars(plot_num), scales = "free") +
    theme_bw(base_size = 14) +
    theme(axis.text.x=element_blank(),
          axis.ticks.x=element_blank(),
          axis.text.y=element_blank(),
          axis.ticks.y=element_blank()) +
    labs(x = "",
         y = "")

pb <- df %>%
    filter(plot_num == "B") %>%
    ggplot(aes(x = x, 
               y = y)) +
    geom_point() +
    geom_smooth(method = "lm", se = FALSE, color = "green") +
    facet_wrap(vars(plot_num), scales = "free") +
    theme_bw(base_size = 14) +
    theme(axis.text.x=element_blank(),
          axis.ticks.x=element_blank(),
          axis.text.y=element_blank(),
          axis.ticks.y=element_blank()) +
    labs(x = "",
         y = "")

pc <- df %>%
    filter(plot_num == "C") %>%
    ggplot(aes(x = x, 
               y = y)) +
    geom_point() +
    geom_smooth(method = "lm", se = FALSE, color = "green") +
    facet_wrap(vars(plot_num), scales = "free") +
    theme_bw(base_size = 14) +
    theme(axis.text.x=element_blank(),
          axis.ticks.x=element_blank(),
          axis.text.y=element_blank(),
          axis.ticks.y=element_blank()) +
    labs(x = "",
         y = "")

pd <- df %>%
    filter(plot_num == "D") %>%
    ggplot(aes(x = x, 
               y = y)) +
    geom_point() +
    geom_smooth(method = "lm", se = FALSE, color = "green") +
    facet_wrap(vars(plot_num), scales = "free") +
    theme_bw(base_size = 14) +
    theme(axis.text.x=element_blank(),
          axis.ticks.x=element_blank(),
          axis.text.y=element_blank(),
          axis.ticks.y=element_blank()) +
    labs(x = "",
         y = "")

pe <- df %>%
    filter(plot_num == "E") %>%
    ggplot(aes(x = x, 
               y = y)) +
    geom_point() +
    geom_smooth(method = "lm", se = FALSE, color = "green") +
    facet_wrap(vars(plot_num), scales = "free") +
    theme_bw(base_size = 14) +
    theme(axis.text.x=element_blank(),
          axis.ticks.x=element_blank(),
          axis.text.y=element_blank(),
          axis.ticks.y=element_blank()) +
    labs(x = "",
         y = "")

pf <- df %>%
    filter(plot_num == "F") %>%
    ggplot(aes(x = x, 
               y = y)) +
    geom_point() +
    geom_smooth(method = "lm", se = FALSE, color = "green") +
    facet_wrap(vars(plot_num), scales = "free") +
    theme_bw(base_size = 14) +
    ylim(-9, 9) +
    theme(axis.text.x=element_blank(),
          axis.ticks.x=element_blank(),
          axis.text.y=element_blank(),
          axis.ticks.y=element_blank()) +
    labs(x = "",
         y = "")

library(patchwork)
(pa + pb + pc) / (pd + pe + pf)
```

:::{.poll}
Which **four** models will exhibit the highest $R^2$?
:::

```{r}
countdown::countdown(1, top = 0)
```

:::{.notes}
This is a repeat of a previous CQ, but now with a linear model and a different characteristic of interest: R^2. The two highest R^2 values should be clearly B and E. The second two are very difficult to discern based on these plots.

This is a good time to mention that for a least squares linear models, R^2 is indeed just the square of the Pearson correlation coefficient. This isn't true of non-linear models.
:::

## 

```{r}
library(tidyverse)
cats <- data.frame(name=c('castiel', 'frank', 'luna', 'luca'),
                   hours=c(12, 18, 19, 10),
                   cuteness=c(9, 10, 9.5, 8),
                   food_eaten=c(175, 200, 215, 218),
                   is_indoor_cat=c(TRUE, TRUE, FALSE, FALSE)) %>%
  as_tibble()
cats
```

```{r}
#| echo: true
m1 <- lm(formula = hours ~ cuteness + food_eaten + is_indoor_cat, 
         data = cats)
```

```{r}
m1$coef
```


:::{.poll}
How many hours does the model predict Frank will sleep each day? **Write out the linear equation of the model from the model output to help you**.
:::

```{r}
countdown::countdown(3, top = 0)
```


##

:::{.poll}
Which is the most appropriate non-linear transformation to apply to `time_being_pet`?
:::

```{r}
#| fig-align: center
#| fig-width: 5
#| fig-height: 3

set.seed(1)
n_samples = 100
tibble(pet=runif(n=n_samples, min=0, max=100),
       hunger= pet ** 4 * (100/ (100^4))
       ) %>% 
    mutate(hunger = hunger + rnorm(n=n_samples, mean=0, sd=2))%>%
    ggplot(aes(x=pet, y=hunger)) +
    geom_point() +
    theme_bw() + 
    lims(x=c(0, 100)) + 
    labs(x="Time being pet",
         y="Hunger")
```

```{r}
countdown::countdown(1)
```

# Problem Set

```{r}
countdown::countdown(25)
```

# Break

```{r}
countdown::countdown(5)
```

# Lab 

```{r}
countdown::countdown(45)
```

# End of Lecture

